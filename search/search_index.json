{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VUX \u00b6 state - App level state/data getters - Get pieces of state or computed values from state actions - Called from components to commit mutation mutations - Mutate the state module - Each module can have its own state, getters, actions & mutations Installation \u00b6 npm install vuex Steps \u00b6 Create store folder inside src folder Inside store folder create index.js file import Vuex from \"vuex\" ; import Vue from \"vue\" ; import todos from \"./modules/todos\" ; // Load Vuex Vue . use ( Vuex ); // Create store export default new Vuex . Store ({ modules : { todos , }, }); Goto main.js in src folder Include store in main.js import Vue from \"vue\" ; import App from \"./App.vue\" ; import store from \"./store\" ; Vue . config . productionTip = false ; new Vue ({ store , render : ( h ) => h ( App ), }). $mount ( \"#app\" ); Create modules folder inside store folder Inside modules create Module.js file todo.js import axios from \"axios\" ; const state = { todos : [], }; const getters = { allTodos : ( state ) => state . todos , }; const actions = { async fetchTodos ({ commit }) { const response = await axios . get ( \"https://jsonplaceholder.typicode.com/todos\" ); commit ( \"setTodos\" , response . data ); }, async addTodo ({ commit }, title ) { const response = await axios . post ( \"https://jsonplaceholder.typicode.com/todos\" , { title , completed : false } ); commit ( \"newTodo\" , response . data ); }, async deleteTodo ({ commit }, id ) { await axios . delete ( `https://jsonplaceholder.typicode.com/todos/ ${ id } ` ); commit ( \"removeTodo\" , id ); }, async filterTodos ({ commit }, e ) { // Get selected number const limit = parseInt ( e . target . options [ e . target . options . selectedIndex ]. innerText ); const response = await axios . get ( `https://jsonplaceholder.typicode.com/todos?_limit= ${ limit } ` ); commit ( \"setTodos\" , response . data ); }, async updateTodo ({ commit }, updTodo ) { const response = await axios . put ( `https://jsonplaceholder.typicode.com/todos/ ${ updTodo . id } ` , updTodo ); console . log ( response . data ); commit ( \"updateTodo\" , response . data ); }, }; const mutations = { setTodos : ( state , todos ) => ( state . todos = todos ), newTodo : ( state , todo ) => state . todos . unshift ( todo ), removeTodo : ( state , id ) => ( state . todos = state . todos . filter (( todo ) => todo . id !== id )), updateTodo : ( state , updTodo ) => { const index = state . todos . findIndex (( todo ) => todo . id === updTodo . id ); if ( index !== - 1 ) { state . todos . splice ( index , 1 , updTodo ); } }, }; export default { state , getters , actions , mutations , }; Inside a component file's script tag import { mapGetters , mapActions } from \"vuex\" ; export default { name : \"Todos\" , methods : { ... mapActions ([ \"fetchTodos\" , \"deleteTodo\" , \"updateTodo\" ]), onDblClick ( todo ) { const updTodo = { id : todo . id , title : todo . title , completed : ! todo . completed , }; this . updateTodo ( updTodo ); }, }, computed : mapGetters ([ \"allTodos\" ]), created () { this . fetchTodos (); }, };","title":"Home"},{"location":"#vux","text":"state - App level state/data getters - Get pieces of state or computed values from state actions - Called from components to commit mutation mutations - Mutate the state module - Each module can have its own state, getters, actions & mutations","title":"VUX"},{"location":"#installation","text":"npm install vuex","title":"Installation"},{"location":"#steps","text":"Create store folder inside src folder Inside store folder create index.js file import Vuex from \"vuex\" ; import Vue from \"vue\" ; import todos from \"./modules/todos\" ; // Load Vuex Vue . use ( Vuex ); // Create store export default new Vuex . Store ({ modules : { todos , }, }); Goto main.js in src folder Include store in main.js import Vue from \"vue\" ; import App from \"./App.vue\" ; import store from \"./store\" ; Vue . config . productionTip = false ; new Vue ({ store , render : ( h ) => h ( App ), }). $mount ( \"#app\" ); Create modules folder inside store folder Inside modules create Module.js file todo.js import axios from \"axios\" ; const state = { todos : [], }; const getters = { allTodos : ( state ) => state . todos , }; const actions = { async fetchTodos ({ commit }) { const response = await axios . get ( \"https://jsonplaceholder.typicode.com/todos\" ); commit ( \"setTodos\" , response . data ); }, async addTodo ({ commit }, title ) { const response = await axios . post ( \"https://jsonplaceholder.typicode.com/todos\" , { title , completed : false } ); commit ( \"newTodo\" , response . data ); }, async deleteTodo ({ commit }, id ) { await axios . delete ( `https://jsonplaceholder.typicode.com/todos/ ${ id } ` ); commit ( \"removeTodo\" , id ); }, async filterTodos ({ commit }, e ) { // Get selected number const limit = parseInt ( e . target . options [ e . target . options . selectedIndex ]. innerText ); const response = await axios . get ( `https://jsonplaceholder.typicode.com/todos?_limit= ${ limit } ` ); commit ( \"setTodos\" , response . data ); }, async updateTodo ({ commit }, updTodo ) { const response = await axios . put ( `https://jsonplaceholder.typicode.com/todos/ ${ updTodo . id } ` , updTodo ); console . log ( response . data ); commit ( \"updateTodo\" , response . data ); }, }; const mutations = { setTodos : ( state , todos ) => ( state . todos = todos ), newTodo : ( state , todo ) => state . todos . unshift ( todo ), removeTodo : ( state , id ) => ( state . todos = state . todos . filter (( todo ) => todo . id !== id )), updateTodo : ( state , updTodo ) => { const index = state . todos . findIndex (( todo ) => todo . id === updTodo . id ); if ( index !== - 1 ) { state . todos . splice ( index , 1 , updTodo ); } }, }; export default { state , getters , actions , mutations , }; Inside a component file's script tag import { mapGetters , mapActions } from \"vuex\" ; export default { name : \"Todos\" , methods : { ... mapActions ([ \"fetchTodos\" , \"deleteTodo\" , \"updateTodo\" ]), onDblClick ( todo ) { const updTodo = { id : todo . id , title : todo . title , completed : ! todo . completed , }; this . updateTodo ( updTodo ); }, }, computed : mapGetters ([ \"allTodos\" ]), created () { this . fetchTodos (); }, };","title":"Steps"},{"location":"temp/","text":"VUX \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Code test \u00b6 console . log ( 123 ); Note test \u00b6 Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Error Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"VUX"},{"location":"temp/#vux","text":"For full documentation visit mkdocs.org .","title":"VUX"},{"location":"temp/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"temp/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"temp/#code-test","text":"console . log ( 123 );","title":"Code test"},{"location":"temp/#note-test","text":"Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Error Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Note test"}]}